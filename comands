#Comando para coleta local

mng collectstatic

#Comando para fazer as novas migracoes

mng makemigrations

#Comando seguinte ao acima, para aplicar as migracoes no banco de dados

mng migrate


#Relacionar modulos com videos.

"""
Até o momento so foram criadas as abas dos videos e os modulos com suas descricoes, abaixo esta como fazer para
relacionar os modulos com videos.
"""
#https://docs.djangoproject.com/en/2.2/topics/db/examples/many_to_one/


#Relacionar os modulos com os conteudos

"""
Neste doc tem-se a forma de relacionar através de um gerente(no caso a gerente é o conteudo) as diferentes apps, neste
caso as apps serão as criadas até agora base, apertivos e modulos, é possivel relacionar todas de uma vez, uma a uma ou
uma com varias.

"""
# https://docs.djangoproject.com/en/2.2/ref/models/relations/#related-objects-reference


#Django extensions

"""
Através do django extension e possivel utilizar o shell do django de forma mais eficiente. Com os comandos neste caso
mng shell_plus.

Documentação do django extensions: https://django-extensions.readthedocs.io/en/latest/installation_instructions.html

"""

#Breadcrumb

"""
Através do breadcrumb é possivel adicionar ao layout da pagina escolhida o caminho usado para chegar essa pagina.
No caso deste projeto através do breadcrumb é possivel dentro da pagina do video ver o caminho feito para chegar lá,
ou seja ver em qual módulo este vídeo está. Também é possivel adicionar URLS aos caminhos.

Documentação: https://getbootstrap.com/docs/4.4/components/breadcrumb/

"""

#QuerySet

"""
prefetch_realeted() serve para buscar previamente os dados de uma app que esta dentro de outra, a diferenca entre
prefetch_realeted() e select_realeted() é que neste caso estamos pegando o Conteudo que está dentro do modulo.

                Conteudo.objects.select_related('modulo').get(slug=slug)


Neste outro caso estamos pegando o conteudo_set do Modulo ou seja faz a mesma coisa que o select porem com variaveis de
lados opostos.


                Modulo.objects.order_by('order').all().prefetch_related('conteudo_set')



Documentação: https://docs.djangoproject.com/en/3.0/ref/models/querysets/#prefetch-related
"""


#ManyToMany

"""
O ManyToMany serve para fazer a ligação de muitos para muitos no django, neste caso foi feita a ligação entre a classe
Turma e a classe User, com o ManyToMany é possivel fazer a relação de muitos usuarios com muitas turmas, ou seja um
mesmo usuario pode participar de várias turmas, assim como só de uma.

Documentação: https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.ManyToManyField
"""


#Removendo migrações

"""
        SÓ DEVE SER USADO SE AS MIGRAÇÕES NÃO ESTIVEREM AINDA NA BRANCH PRINCIPAL, SOMENTE EM DESENVOLVIMENTO.

"""

"""
Para remover uma migração deve-se executar um comando que faz com que o sistema volte a uma migração anterior.
Comando neste caso:

Comando para mostrar todas as migrações:

            mng showmigrations

Lembrando que este comando volta para a migração selecionada.

            mng migrate (titulo_da_migração) (numero_da_migração)

No caso deste projeto foi:

            mng migrate turmas 0001

Ou seja queriamos VOLTAR para a migração 0001 da app turmas.

"""

ForeignKey

"""
A foreighkey e muito utilizada em aplicações com bancos de dados pois através dela é possivel relacionar uma classe com
um modelo.

Exemplo:

                class Matricula(models.Model):
                    date = models.DateTimeField(auto_now_add=True)
                    usuario = models.ForeignKey(get_user_model(), on_delete=models.CASCADE)
                    turma = models.ForeignKey(Turma, on_delete=models.CASCADE)


Neste caso a classe matricula esta pegando o date( Horario e data de quando a matricula foi feita)
Esta também relacionando o modelo usuario(get_user_model) com o classe matricula.
E esta relacionando o modelo Turma com a classe matricula tambem.


            class Turma(models.Model):
                nome = models.CharField(max_length=64)
                slug = models.SlugField(max_length=64)
                inicio = models.DateField()
                fim = models.DateField()
                alunos = models.ManyToManyField(get_user_model(), through='Matricula')


Na variavel alunos os usuarios estão sendo salvos através de uma tabela intermediaria chamada matricula com uma relação
muitos para muitos.

"""

Meta

"""
A classe meta neste projeto teve a utilidade de não permitir que o mesmo usuario entre duas vezes em uma turma, através
do comando unique_together.

            class Matricula(models.Model):
                data = models.DateTimeField(auto_now_add=True)
                usuario = models.ForeignKey(get_user_model(), on_delete=models.CASCADE)
                turma = models.ForeignKey(Turma, on_delete=models.CASCADE)

                class Meta:
                    unique_together = [['usuario', 'turma']]
                    ordering = ['turma', 'data']


        Perceber que a classe Meta está dentro da classe Matricula

Neste caso a classe Matricula representa a tabela intermediaria que possui os dados dos relacionamentos entre usuario e
turma, e a classe Meta juntamente com o comando unique_together fazem com que não seja possivel que o mesmo usuario entre
na turma mais de uma vez.

O ordering é um comando para ordenar a lista por turma, caso o usuario esteja em mais de uma turma(no caso tera dois dados
do mesmo usuario) então a ordem fica por data.

"""

Controle de acesso

"""
Através da documentação abaixo e possivel implementar um sistema de controle de acesso, basicamene um sistema de login
e senha para pode acessar algum conteudo que só poderá ser liberado pelo administrador. Além de criar uma identidade ao
usuario.

https://docs.djangoproject.com/en/3.0/topics/auth/default/#module-django.contrib.auth.views
"""

Force login

"""
Este comando é muito útil e muito utilizado em desenvolvimento web, com ele é possivel deixar o usuario logado e apartir
disso apresentar contéudo. Em geral quase todos os sites usam isso, pois sempre existem uma parte de login no site.

Documentação: https://docs.djangoproject.com/en/3.0/topics/testing/tools/#django.test.Client.force_login
"""

Login_required

"""
Através do decorator Login_required é possivel limitar o aceso aos conteudos da páginas para apenas usuarios logados.

Documentação: https://docs.djangoproject.com/en/3.0/topics/auth/default/#the-login-required-decorator

"""

Backend para envio de emails

"""
Nesta documentação está presente a forma que feito o backend para envio de emails na parte de recuperação de senha.

Doc: https://docs.djangoproject.com/en/3.0/topics/email/#email-backends
"""

Comando pipenv sync -d e pipenv sync

"""
São os comandos para ativar as dependencias do piplock, caso der pull em um projeto do git é necessario utilizar esses
comandos para ativar as dependencias que estão no piplock.
"""